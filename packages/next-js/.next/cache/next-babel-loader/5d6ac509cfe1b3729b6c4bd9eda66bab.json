{"ast":null,"code":"const ZCRMRestClient = require('zcrmsdk');\n\nconst {\n  ZOHO_CLIENT_ID,\n  ZOHO_CLIENT_SECRET,\n  ZOHO_GRANT_TOKEN,\n  ZOHO_USER_IDENTIFIER,\n  ZOHO_REDIRECT_URL\n} = process.env;\nvar config = {\n  \"client_id\": ZOHO_CLIENT_ID,\n  //mandatory\n  \"client_secret\": ZOHO_CLIENT_SECRET,\n  //mandatory\n  \"redirect_url\": ZOHO_REDIRECT_URL,\n  //mandatory\n  // \"user_identifier\": ZOHO_USER_IDENTIFIER,\n  // \"mysql_username\": \"{mysql_username}\",//optional ,\"root\" is default value\n  // \"mysql_password\": \"{mysql_password}\",//optional ,\"\" is default value\n  // \"base_url\": \"{api_base_url}\",//optional ,\"www.zohoapis.com\" is default value\n  // \"iamurl\": \"{accounts_url}\",//optional ,\"accounts.zoho.com\" is default value\n  // \"version\": \"{api_version}\",//optional ,\"v2\" is default value\n  \"tokenmanagement\": '@cea/zoho-token-management' //optional ,mysql module is default\n\n};\nexport const init = async () => {\n  console.log(`Initializing Zoho client`);\n  await ZCRMRestClient.initialize(config);\n  return ZCRMRestClient;\n};\nexport const getClient = async () => {\n  let client = ZCRMRestClient; // if the client isn't initialized, do so\n\n  if (!client.getClientId()) {\n    client = await init();\n  }\n\n  return client;\n};\nexport const handleRedirectCallback = async ({\n  code\n}) => {\n  console.log(`Handling Zoho redirect callback`);\n  const client = await getClient();\n  const tokenRes = await client.generateAuthTokens(null, code);\n  return tokenRes;\n};","map":{"version":3,"sources":["/Users/sam/Sites/ea/ea-global-zoho-login/packages/next-js/lib/zoho.js"],"names":["ZCRMRestClient","require","ZOHO_CLIENT_ID","ZOHO_CLIENT_SECRET","ZOHO_GRANT_TOKEN","ZOHO_USER_IDENTIFIER","ZOHO_REDIRECT_URL","process","env","config","init","console","log","initialize","getClient","client","getClientId","handleRedirectCallback","code","tokenRes","generateAuthTokens"],"mappings":"AAAA,MAAMA,cAAc,GAAGC,OAAO,CAAC,SAAD,CAA9B;;AAEA,MAAM;AAAEC,EAAAA,cAAF;AAAkBC,EAAAA,kBAAlB;AAAsCC,EAAAA,gBAAtC;AAAwDC,EAAAA,oBAAxD;AAA8EC,EAAAA;AAA9E,IAAoGC,OAAO,CAACC,GAAlH;AAEA,IAAIC,MAAM,GAAG;AACX,eAAaP,cADF;AACiB;AAC5B,mBAAiBC,kBAFN;AAEyB;AACpC,kBAAgBG,iBAHL;AAGuB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA,qBAAmB,4BAVR,CAUqC;;AAVrC,CAAb;AAaA,OAAO,MAAMI,IAAI,GAAG,YAAY;AAC9BC,EAAAA,OAAO,CAACC,GAAR,CAAa,0BAAb;AACA,QAAMZ,cAAc,CAACa,UAAf,CAA0BJ,MAA1B,CAAN;AACA,SAAOT,cAAP;AACD,CAJM;AAMP,OAAO,MAAMc,SAAS,GAAG,YAAY;AACnC,MAAIC,MAAM,GAAGf,cAAb,CADmC,CAEnC;;AACA,MAAI,CAACe,MAAM,CAACC,WAAP,EAAL,EAA2B;AACzBD,IAAAA,MAAM,GAAG,MAAML,IAAI,EAAnB;AACD;;AACD,SAAOK,MAAP;AACD,CAPM;AASP,OAAO,MAAME,sBAAsB,GAAG,OAAO;AAAEC,EAAAA;AAAF,CAAP,KAAoB;AACxDP,EAAAA,OAAO,CAACC,GAAR,CAAa,iCAAb;AACA,QAAMG,MAAM,GAAG,MAAMD,SAAS,EAA9B;AACA,QAAMK,QAAQ,GAAG,MAAMJ,MAAM,CAACK,kBAAP,CAA0B,IAA1B,EAAgCF,IAAhC,CAAvB;AACA,SAAOC,QAAP;AACD,CALM","sourcesContent":["const ZCRMRestClient = require('zcrmsdk')\n\nconst { ZOHO_CLIENT_ID, ZOHO_CLIENT_SECRET, ZOHO_GRANT_TOKEN, ZOHO_USER_IDENTIFIER, ZOHO_REDIRECT_URL } = process.env\n\nvar config = {\n  \"client_id\": ZOHO_CLIENT_ID,//mandatory\n  \"client_secret\": ZOHO_CLIENT_SECRET,//mandatory\n  \"redirect_url\": ZOHO_REDIRECT_URL,//mandatory\n  // \"user_identifier\": ZOHO_USER_IDENTIFIER,\n  // \"mysql_username\": \"{mysql_username}\",//optional ,\"root\" is default value\n  // \"mysql_password\": \"{mysql_password}\",//optional ,\"\" is default value\n  // \"base_url\": \"{api_base_url}\",//optional ,\"www.zohoapis.com\" is default value\n  // \"iamurl\": \"{accounts_url}\",//optional ,\"accounts.zoho.com\" is default value\n  // \"version\": \"{api_version}\",//optional ,\"v2\" is default value\n  \"tokenmanagement\": '@cea/zoho-token-management' //optional ,mysql module is default\n}\n\nexport const init = async () => {\n  console.log(`Initializing Zoho client`)\n  await ZCRMRestClient.initialize(config)\n  return ZCRMRestClient\n}\n\nexport const getClient = async () => {\n  let client = ZCRMRestClient\n  // if the client isn't initialized, do so\n  if (!client.getClientId()) {\n    client = await init()\n  }\n  return client\n}\n\nexport const handleRedirectCallback = async ({ code }) => {\n  console.log(`Handling Zoho redirect callback`)\n  const client = await getClient()\n  const tokenRes = await client.generateAuthTokens(null, code)\n  return tokenRes\n}\n"]},"metadata":{},"sourceType":"module"}