{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport auth0 from 'lib/auth0';\nimport { getClient } from 'lib/zoho';\nimport uuid from 'uuid-random';\nimport url from 'url';\nimport { create } from 'domain';\nconst LOGIN_URL_BASE = 'https://creator.zoho.com?creator_id=abc123';\n\nconst zohoRes = res => {\n  // if the body is empty, it probably means there was no record returned\n  if (!res.body) {\n    try {\n      res = JSON.parse(res);\n    } catch (err) {\n      console.error(`response is not valid JSON`);\n    }\n\n    const {\n      message,\n      status_code\n    } = res; // 204 means that we made an OK request, but there was no data to return\n\n    if (status_code.toString() === '204') return []; // otherwise, assume it's an error and throw\n    // if we have a message, throw with that\n\n    if (message) {\n      const err = new Error(res.message);\n      if (status_code) err.status_code = status_code;\n      throw err;\n    } // if we get here, we're in uncharted territory...\n\n\n    console.log(res);\n    throw new Error('Unknown error');\n  }\n\n  const body = JSON.parse(res.body); // error handling\n\n  if (res.statusCode > 299) {\n    if (body.data) {\n      for (const item of body.data) {\n        console.error(`${item.code}: ${item.message}`);\n        console.error(item.details);\n      }\n\n      throw new Error('API error');\n    }\n\n    const err = new Error(body.message || body);\n\n    if (typeof body === 'object') {\n      for (const key in body) {\n        err[key] = body[key];\n        throw err;\n      }\n    }\n  }\n\n  if (!body.data) {\n    console.log(body);\n    return [];\n  }\n\n  return body.data;\n};\n\nconst zohoResSingle = res => zohoRes(res)[0];\n\nconst doUpdateZohoContactWithToken = async ({\n  id,\n  token\n}) => {\n  const client = await getClient();\n  return client.API.MODULES.put({\n    module: 'Contacts',\n    id,\n    body: {\n      data: [{\n        Auth_Token_UUID: token\n      }],\n      trigger: []\n    }\n  }).then(zohoResSingle);\n};\n\nconst createZohoContactWithToken = async ({\n  email,\n  token\n}) => {\n  console.log(`Creating Zoho contact with email ${email}`);\n  const client = await getClient();\n  const updateReq = await client.API.MODULES.post({\n    module: 'Contacts',\n    body: {\n      data: [{\n        Email: email,\n        Last_Name: '-',\n        Auth_Token_UUID: token\n      }],\n      trigger: [] // TODO: unsure if this is correct behaviour, check with Kashif\n\n    }\n  }).then(zohoResSingle);\n  if (updateReq.status === 'success') return true; // if we got here, there's been an error\n  // one error case is a duplicate, which we can easily handle...\n\n  if (updateReq.code === 'DUPLICATE_DATA') {\n    console.log(`Found a duplicate, updating instead...`);\n    const {\n      id\n    } = updateReq.details;\n    await doUpdateZohoContactWithToken({\n      id,\n      token\n    });\n    return true;\n  }\n\n  throw new Error(updateReq.message);\n};\n\nconst updateZohoContactWithToken = async ({\n  email,\n  token\n}) => {\n  const client = await getClient(); // find the contact based on email\n\n  console.log(`Searching for Zoho contact with email ${email}`);\n  const Contact = await client.API.MODULES.search({\n    module: 'Contacts',\n    params: {\n      email\n    }\n  }).then(zohoResSingle);\n  if (!Contact) return createZohoContactWithToken({\n    email,\n    token\n  }); // fallback to creating the contact\n  // update the contact record with token\n\n  console.log(`Updating contact ${Contact.Email} with token ${token}`);\n  const updateReq = await doUpdateZohoContactWithToken({\n    id: Contact.id,\n    token\n  });\n  if (updateReq.status !== 'success') throw new Error(updateReq.message);\n  return true;\n};\n\nconst getZohoURL = ({\n  email,\n  token\n}) => {\n  const urlBase = url.parse(LOGIN_URL_BASE, true);\n  delete urlBase.search;\n  urlBase.query = _objectSpread(_objectSpread({}, urlBase.query), {}, {\n    email,\n    token\n  });\n  return url.format(urlBase);\n};\n\nexport default auth0.requireAuthentication(async function authorizeZoho(req, res) {\n  try {\n    const {\n      user\n    } = await auth0.getSession(req);\n    const {\n      email,\n      email_verified\n    } = user;\n    if (!email_verified) throw new Error('User email is not verified!');\n    const token = uuid();\n    let Contact;\n\n    try {\n      await updateZohoContactWithToken({\n        email,\n        token\n      });\n    } catch (err) {\n      if (err.status_code === 204) await createZohoContactWithToken({\n        email,\n        token\n      });\n      throw err;\n    }\n\n    const zohoUrl = getZohoURL({\n      email,\n      token\n    });\n    res.json({\n      email,\n      token,\n      zohoUrl\n    });\n  } catch (err) {\n    console.error(err);\n    res.status(500).send(err.message);\n  }\n});","map":{"version":3,"sources":["/Users/sam/Sites/ea/ea-global-zoho-login/packages/next-js/pages/api/zoho/update-token.js"],"names":["auth0","getClient","uuid","url","create","LOGIN_URL_BASE","zohoRes","res","body","JSON","parse","err","console","error","message","status_code","toString","Error","log","statusCode","data","item","code","details","key","zohoResSingle","doUpdateZohoContactWithToken","id","token","client","API","MODULES","put","module","Auth_Token_UUID","trigger","then","createZohoContactWithToken","email","updateReq","post","Email","Last_Name","status","updateZohoContactWithToken","Contact","search","params","getZohoURL","urlBase","query","format","requireAuthentication","authorizeZoho","req","user","getSession","email_verified","zohoUrl","json","send"],"mappings":"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","sourcesContent":["import auth0 from 'lib/auth0'\nimport { getClient } from 'lib/zoho'\nimport uuid from 'uuid-random'\nimport url from 'url'\nimport { create } from 'domain'\n\nconst LOGIN_URL_BASE = 'https://creator.zoho.com?creator_id=abc123'\n\nconst zohoRes = res => {\n  // if the body is empty, it probably means there was no record returned\n  if (!res.body) {\n    try {\n      res = JSON.parse(res)\n    } catch (err) {\n      console.error(`response is not valid JSON`)\n    }\n    const { message, status_code } = res\n    // 204 means that we made an OK request, but there was no data to return\n    if (status_code.toString() === '204') return []\n    // otherwise, assume it's an error and throw\n    // if we have a message, throw with that\n    if (message) {\n      const err = new Error(res.message)\n      if (status_code) err.status_code = status_code\n      throw err\n    }\n    // if we get here, we're in uncharted territory...\n    console.log(res)\n    throw new Error('Unknown error')\n  }\n  const body = JSON.parse(res.body)\n  // error handling\n  if (res.statusCode > 299) {\n    if (body.data) {\n      for (const item of body.data) {\n        console.error(`${item.code}: ${item.message}`)\n        console.error(item.details)\n      }\n      throw new Error('API error')\n    }\n    const err = new Error(body.message || body)\n    if (typeof body === 'object') {\n      for (const key in body) {\n        err[key] = body[key]\n        throw err\n      }\n    }\n  }\n  if (!body.data) {\n    console.log(body)\n    return []\n  }\n  return body.data\n}\n\nconst zohoResSingle = res => zohoRes(res)[0]\n\nconst doUpdateZohoContactWithToken = async ({ id, token }) => {\n  const client = await getClient()\n  return client.API.MODULES.put({\n    module: 'Contacts',\n    id,\n    body: {\n      data: [{\n        Auth_Token_UUID: token\n      }],\n      trigger: []\n    }\n  }).then(zohoResSingle)\n}\n\nconst createZohoContactWithToken = async ({ email, token }) => {\n  console.log(`Creating Zoho contact with email ${email}`)\n  const client = await getClient()\n  const updateReq = await client.API.MODULES.post({\n    module: 'Contacts',\n    body: {\n      data: [{\n        Email: email,\n        Last_Name: '-',\n        Auth_Token_UUID: token\n      }],\n      trigger: [] // TODO: unsure if this is correct behaviour, check with Kashif\n    }\n  }).then(zohoResSingle)\n  if (updateReq.status === 'success') return true\n  // if we got here, there's been an error\n  // one error case is a duplicate, which we can easily handle...\n  if (updateReq.code === 'DUPLICATE_DATA') {\n    console.log(`Found a duplicate, updating instead...`)\n    const { id } = updateReq.details\n    await doUpdateZohoContactWithToken({ id, token })\n    return true\n  }\n  throw new Error(updateReq.message)\n}\n\nconst updateZohoContactWithToken = async ({ email, token }) => {\n  const client = await getClient()\n  // find the contact based on email\n  console.log(`Searching for Zoho contact with email ${email}`)\n  const Contact = await client.API.MODULES.search({\n    module: 'Contacts',\n    params: { email }\n  }).then(zohoResSingle)\n  if (!Contact) return createZohoContactWithToken({ email, token })\n  // fallback to creating the contact\n  // update the contact record with token\n  console.log(`Updating contact ${Contact.Email} with token ${token}`)\n  const updateReq = await doUpdateZohoContactWithToken({ id: Contact.id, token })\n  if (updateReq.status !== 'success') throw new Error(updateReq.message)\n  return true\n}\n\nconst getZohoURL = ({ email, token }) => {\n  const urlBase = url.parse(LOGIN_URL_BASE, true)\n  delete urlBase.search\n  urlBase.query = {\n    ...urlBase.query,\n    email,\n    token\n  }\n  return url.format(urlBase)\n}\n\nexport default auth0.requireAuthentication(async function authorizeZoho (req, res) {\n  try {\n    const { user } = await auth0.getSession(req)\n    const { email, email_verified } = user\n    if (!email_verified) throw new Error('User email is not verified!')\n    const token = uuid()\n    let Contact\n    try {\n      await updateZohoContactWithToken({ email, token })\n    } catch (err) {\n      if (err.status_code === 204) await createZohoContactWithToken({ email, token })\n      throw err\n    }\n    const zohoUrl = getZohoURL({ email, token })\n    res.json({ email, token, zohoUrl })\n  } catch (err) {\n    console.error(err)\n    res.status(500).send(err.message)\n  }\n})\n"]},"metadata":{},"sourceType":"module"}